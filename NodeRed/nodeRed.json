{
    /* Setup NodeRed in an Web App For Containers and mount filesystem to Storage Account */
    /* Ncedia 2020 */
    /* Please read how to setup login/authentication https://nodered.org/docs/user-guide/runtime/securing-node-red#editor--admin-api-security */

    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": 
        {
        "siteName": {
            "type": "string",
            "metadata": {
                "description": "The name of the site."
            }
        },
        "storageAccountName": {
            "type": "string",
            "defaultValue": "[concat('storage', uniqueString(resourceGroup().id))]",
            "metadata": {
                "description": "Specifies the name of the Azure Storage account."
            }
        }
    },
    "variables": {
        "servicePlanName": "[concat(parameters('siteName'), '-serviceplan')]"
    },
    "resources": [
        {
            /* Create Storage Account */
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[parameters('storageAccountName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "accessTier": "Hot"
            }
        },
        {
            /* Create Azure File Share in Storage Account */
            "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
            "apiVersion": "2019-06-01",
            "name": "[concat(parameters('storageAccountName'), '/default/', 'data')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ]
        },
        {
            /* Create App Service Plan*/
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2020-06-01",
            "kind": "linux",
            "name": "[variables('servicePlanName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "name": "[variables('servicePlanName')]",
                "reserved": true,
                "numberOfWorkers": "1"
            },
            "sku": {
                "Tier": "Basic",
                "Name": "B1"
            }
        },
        {
            /* Create Web App */
            "type": "Microsoft.Web/sites",
            "apiVersion": "2020-06-01",
            "name": "[parameters('siteName')]",
            "location": "[resourceGroup().location]",
            "kind": "app,linux,container",
            "properties": {
                "enabled": true,
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]",
                "reserved": true,
                "isXenon": false,
                "hyperV": false,
                "siteConfig": {
                    "appCommandLine": "",
                    "linuxFxVersion": "DOCKER|nodered/node-red:latest"
                },
                "scmSiteAlsoStopped": false,
                "clientAffinityEnabled": false,
                "clientCertEnabled": false,
                "hostNamesDisabled": false,
                "containerSize": 0,
                "dailyMemoryTimeQuota": 0,
                "httpsOnly": true,
                "redundancyMode": "None"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('servicePlanName'))]"
            ]
        },
        {
            /* Mount file share to container */
            "type": "Microsoft.Web/sites/config",
            "apiVersion": "2018-11-01",
            "name": "[concat(parameters('siteName'), '/web')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('siteName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            ],
            "properties": {
                "azureStorageAccounts": {
                    "DataPersistance": {
                        "type": "AzureFiles",
                        "accountName": "[parameters('storageAccountName')]",
                        "shareName": "data",
                        "mountPath": "/data",
                        "accessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
                    }
                },
                "scmType": "None",
                "use32BitWorkerProcess": false,
                "webSocketsEnabled": true,
                "alwaysOn": true,
                "managedPipelineMode": "Integrated"
            }
        }
    ]
}
